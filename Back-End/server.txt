var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var morgan = require('morgan');
var mongoose = require('mongoose');
var User = require('./user');
var Sanpham = require('./sanpham');
var port = process.env.PORT || 8080;
var jwt = require('jsonwebtoken');

var superSecret = 'ilovescotchsotchuscotchscotch';
// mongodb://localhost:27017/web_didong

// App configuration
// requests information
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// ...
app.use(function (req, res, next) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GEt', 'PoST');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, Authorization');
    next();
});

//...
app.use(morgan('dev'));

mongoose.Promise = global.Promise;
mongoose.connect('mongodb://localhost:27017/web_didong', { useNewUrlParser: true });
mongoose.set('useCreateIndex', true);

app.get('/', function (req, res) {
    res.send('Welcome to the home page!')
});

var apiRouter = express.Router();

//apiRouter.use(function(req, res, next) {
//   console.log('Bao hieu API router co nguoi vao trang Main!');
// next();
//});

/*apiRouter.post('/authenticate', function (req, res) {
    User.findOne({
        username: req.body.username
    }).select('name username password').exec(function (err, user) {
        if (err) throw err;

        if (!user) {
            res.json({
                success: false,
                message: 'Authentication failed. User not found.'
            });
        } else if (user) {
            var validPassword = user.comparePassword(req.body.password);
            if (!validPassword) {
                res.json({
                    success: false,
                    message: 'Authentication failed. Wrong password.'
                });
            } else {
                var token = jwt.sign({
                    name: user.name,
                    username: user.username
                }, superSecret, {
                    expiresIn: '24h'
                });

                res.json({
                    success: true,
                    message: 'Lam viec voi token!',
                    token: token
                });
            }
        }
    });
});

// token
apiRouter.use(function(req, res, next) {
    console.log('Dang lam tren App!');

    // kiem tra header or url
    var token = req.body.token || req.query.token || req.headers['x-access-token'];

    if(token) {
        jwt.verify(token, superSecret, function(err, decoded) {
            if(err) {
                return res.json({ success: false, message: 'Failed to authenticate token.'});
            } else {
                req.decoded = decoded;
                next();
            }
        });
    } else {
        return res.status(403).send({
            success: false,
            message: 'No token provided.'
        });
    }
});*/

apiRouter.get('/', function (req, res) {
    res.json({ message: 'API' });
});

apiRouter.route('/users')
.post(function(req, res){
    var user = new User();
    user.name = req.body.name;
    user.username = req.body.username;
    user.password = req.body.password;

    user.save(function(err){
        if ( err) {
            if(err.code == 11000)
            return res.json({success: false, message: 'A user with that username already exist. '});
            else
            return res.send(err);
        }

        res.json({message: ' User created! '});
    });
})

//get all user
.get(function(req,res){
    User.find(function(err, users){
        if(err) return res.send(err);
        res.json(users);
    });
});

//getting a single User (Get/api/users/:user_id)
apiRouter.route('/users/:user_id')
    .get(function(req, res) {
        User.findById(req.params.user_id, function(err, user) {
            if(err) return res.send(err);

            res.json(user);
        });
    })

//update the user with this id
    .put(function(req, res) {
        User.findById(req.params.user_id, function(err, user) {
            if(err) return res.send(err);

            if(req.body.name) user.name = req.body.name;
            if(req.body.name) user.username = req.body.username;
            if(req.body.password) user.password = req.body.password;

            user.save(function(err) {
                if(err) return res.send(err);

                res.json({ message: 'User updated!'});
            });
        });
    })

// delete the user with this id
    .delete(function(req, res) {
        User.remove({
            _id: req.params.user_id
        }, function(err, user) {
            if (err) return res.send(err);
            res.json({ message: 'Successfully deleted'});
    });
});

apiRouter.route('/sanpham')
    .post(function(req, res) {
        var sanpham = new Sanpham();
        sanpham.MaSP = req.body.MaSP;
        sanpham.TenSP = req.body.TenSP;
        sanpham.Gia = req.body.Gia;
        sanpham.SoLuong = req.body.SoLuong;
        sanpham.MoTa = req.body.MoTa;
        sanpham.ImageUrl = req.body.ImageUrl;

        sanpham.save(function(err) {
           if(err) {
               if( err.code == 11000)
               return res.json({success: false, message: 'Can not'});
            else
            return res.send(err); 
        }
            res.json({message: 'User created!'});
        });
    })
    .get(function(req, res) {
        Database.find(function(err, sanpham) {
            if(err) return res.send(err);
            res.json(sanpham);
        });
    });

apiRouter.route('sanpham/:SP_id')
    .get(function(req, res) {
        Database.findById(req.params.SP_id, function(err, sanpham) {
            if(err) return res.send(err);
            res.json(sanpham);
        });
    })

    .put(function(req, res) {
        Sanpham.findById(req.params.SP_id, function(err, sanpham) {
            if(err) return res.send(err);

       if(req.body.MaSP) sanpham.MaSP = req.body.MaSP;
       if(req.body.TenSP) sanpham.TenSP = req.body.TenSP;
       if(req.body.Gia) sanpham.Gia = req.body.Gia;
       if(req.body.SoLuong) sanpham.SoLuong = req.body.SoLuong;
       if(req.body.MoTa) sanpham.MoTa = req.body.MoTa;
       if(req.body.ImageUrl) sanpham.ImageUrl = req.body.ImageUrl;

       sanpham.save(function(err) {
           if(err) return res.send(err);

           res.json({ message: 'Sanpham updated!'});
       });

    });
})

    .delete(function(req, res) {
        Sanpham.remove({
            _id: req.params.SP_id
        },function(err, sanpham) {
            if(err) return res.send(err);

            res.json({ message: ' Deleted!'});
        });
    });

app.use('/api', apiRouter);

app.listen(port);
console.log('Port can dung la: ' + port);